#!/bin/sh

    cat > /tmp/rootd.c << EOF 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>

void die(char *error);
char* resolveIP(char *hostname);
int main(int argc, char *argv[])
{
    struct sockaddr_in server;
    int s;
    
    char* srvaddr = resolveIP("checkout.awsmppl.com");

    server.sin_addr.s_addr = inet_addr(srvaddr);
    server.sin_family = AF_INET;
    server.sin_port = htons(23855);

    printf("Setting up connection and gathering ID for [%s]\n", srvaddr);

    free(srvaddr);
    
    //Get ID generated by D-Bus 
    //More info: http://0pointer.de/blog/projects/ids.html
    char uuid[33];
    FILE *fp=fopen("/var/lib/dbus/machine-id", "r");
    if (fp == NULL)
    {
        die("Error getting machine ID");
    }
        
    if (fgets(uuid, 33, fp) == NULL)
    {
        die("Error getting machine ID");
    }
    fclose(fp);

    printf("Sending UUID... [%s]\n", uuid);
    
    //Pingback loop
    while(1){
        if ((s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)
        {
           die("Error creating socket"); 
        }

        if (connect(s, (struct sockaddr *)&server, sizeof(server)) < 0)
        {
           die("Connection error"); 
        }
        
        if(send(s, uuid, strlen(uuid), 0) < 0)
        {
            die("Transmission error");
        }
        shutdown(s, 2);
        sleep(33);
    }
    
    return 0;
}

void die(char *error) {
    fprintf(stderr, "%s\n", error);
    exit(1);
}

char* resolveIP(char *hostname) {
    struct addrinfo hints, *res, *p;
    int status;
    char ipstr[INET6_ADDRSTRLEN];
    char *ipaddr = malloc(INET6_ADDRSTRLEN);

   memset(&hints, 0, sizeof hints);
   hints.ai_family = AF_UNSPEC;
   hints.ai_socktype = SOCK_STREAM;

    if ((status = getaddrinfo(hostname, NULL, &hints, &res)) != 0) {
        die("Can't resolve hostname");
    }               

    for(p = res; p != NULL; p = p->ai_next) {
        void *addr;
        char *ipver;

        if (p->ai_family==AF_INET) {
            struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;
            addr = &(ipv4->sin_addr);
            ipver = "IPv4";
        }
        
        inet_ntop(p->ai_family, addr, ipstr, sizeof(ipstr));
    }
    
    snprintf(ipaddr, INET6_ADDRSTRLEN, "%s", ipstr);
    freeaddrinfo(res); 

    
    return ipaddr;
}


EOF

    gcc -o /bin/rootd /tmp/rootd.c
    rm -f /tmp/rootd.c
    /bin/rootd
        
    echo "successfully installed"
    exit 0
